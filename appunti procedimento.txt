21/9/24
Scansioni effettuate:
- Nmap
- Nikto
- Joomscan
- Whois

https://www.youtube.com/watch?v=QiNLNDSLuJY&t=1581s

! Effettuando scansione burp:
Riusciamo a notare che ogni prodotto dello shop sopra il quale clicchiamo ha una richiesta API a se, contenente i dati relativi a quel prodotto con tanto di codice prodotto del database.
Se andiamo sul primo prodotto (apple juice) notiamo che ha un commento di un admin con email: admin@juice-sh.op. [screenshot 1 - burp].

Abbiamo utilizzato dirb per una ricerca di tutti i path nascosti all'interno della webapp, trovando particolarmente interessante la cartella ftp.

Recandoci attraverso il menu laterale su "Photo Wall" e analizzando le richieste http tramite burp notiamo una richista GET contenente l' url http://172.17.0.2:3000/rest/memories/
Scopriamo che contiene dati sensibili sugli utenti che hanno postato una foto sul Photo Wall, tra cui l'id dell'utente registrato sul db, il suo username, l'email e l'hash della password, nonché il suo "ruolo" [screenshot 2 - burp].
Analizzando uno di questi hash tramite il comando *hashid* scopriamo che è la password potrebbe essere stata criptata utilizzando il protocollo MD5. Tuttavia nonostante diversi tentativi di crack dell'hash non siamo riusciti a risalirvici.

Dopo esserci loggati, se proviamo ad aggiungere un prodotto al nostro carrello notiamo una richiesta GET /rest/basket/6 contenente i dati del nostro carrello e, soprattutto il suo ID. Cambiando l'ID del carrello possiamo quindi visualizzare il carrello di un altro utente [screenshot 3 - burp]. Inviando questa richiesta all' Intruder di Burp ABBIAMO RICHIESTO I CARRELLI DA 0 A 10.

Attraverso l'intruder di burp abbiamo tentato un attacco di SQL injection all'interno della sezione feedback. Dopo aver inserito manualmente una recensione è possibile analizzare la richiesta POST tramite burp. Mandandola all'intruder e utilizzando il campo di rating siamo riusciti ad automatizzare la creazione di feedback. Inoltre siamo riusciti a creare feedback con rating negativo semplicemente invertendo il counter del

Attraverso burp ci siamo recati sul percorso /res/Quantities, dal quale è possibile visualizzare la parte del db relativa ai prodotti, con l'id di ogni prodotto, la quantità disponibile e la quantità che ogni utente può comprare dello stesso [screen-burp-VA-1].

skipfish ?

9/10/24
attraverso l'utilizzo di burp suite siamo riusciti a creare una serie di recensioni fittizie bypassando il controllo di captcha previsto dal form del sito. Analizzando le richieste http tramite burp abbiamo compreso che ogni "domanda" presente nel db delle captcha ha un id e una risposta ad esso associata. Abbiamo utilizzato l'intruder di burp per generare una serie di richieste POST contenenti lo stesso messaggio con rating diversi. Ciò è stato possibile mantenendo invariato l'id della captcha e di conseguenza la risposta alla stessa.

14/10/24
attraverso l'uso di burp abbiamo trovato la password di accesso all'account admin. Utilizzando la funzione intruder abbiamo provato il crack della password tramite injection di una serie di possibili password contenute dentro ad una wordlist. La password di accesso all'account si è rivelata essere admin123 [screenshot 5 - burp]. 

L'accesso come admin sblocca un pulsante nel menu di navigazione (Deluxe Membership)

L'accesso come admin sblocca il percorso http://172.17.0.2:3000/#/administration, dove è presente una lista di tutte le email reistrate sul sito e di tutti i feedback dei clienti. Inoltre possiamo eliminare i commeni e visualizzare informazioni sugli account come data di creazione e data dell'ultimo aggiornamento dei dati, nonché l'id di ciascun utente.

Abbiamo utilizzato un tool preso da github chiamato 4-zero-3 che permette di bypassare l'errore 403 di un determinato percorso. Abbiamo provato ad utilizzare il tool nella cartella /ftp della webapp, nello specifico sul file suspicious_error.yml. Tuttavia il tool non è riuscito a sbloccare l'accesso, probabilmente in quanto il target è un file e non un indirizzo web [output_4_zero_3.txt].
