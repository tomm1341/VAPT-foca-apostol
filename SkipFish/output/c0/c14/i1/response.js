var res = {'data':'HTTP/1.1 200 Partial Content\x0aAccess-Control-Allow-Origin: *\x0aX-Content-Type-Options: nosniff\x0aX-Frame-Options: SAMEORIGIN\x0aFeature-Policy: payment \x27self\x27\x0aX-Recruiting: /#/jobs\x0aAccept-Ranges: bytes\x0aCache-Control: public, max-age=0\x0aLast-Modified: Mon, 09 Sep 2024 16:03:44 GMT\x0aETag: W/\x226f708-191d786d700\x22\x0aContent-Type: application/javascript; charset=UTF-8\x0aContent-Range: bytes 0-399999/456456\x0aVary: Accept-Encoding\x0aContent-Encoding: gzip\x0aDate: Tue, 24 Sep 2024 13:53:41 GMT\x0aConnection: keep-alive\x0aKeep-Alive: timeout=5\x0aTransfer-Encoding: chunked\x0a\x0a\x22use strict\x22;(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[179],{4550:(tt,K,c)=\x3e{c.d(K,{e:()=\x3es});var S=c(2340),t=c(4850),I=c(7221),U=c(4650),M=c(529);let s=(()=\x3e{class T{constructor(b){this.http=b,this.hostServer=S.N.hostServer,this.host=this.hostServer+\x22/rest/admin\x22}getApplicationConfiguration(){return this.configObservable||(this.configObservable=this.http.get(this.host+\x22/application-configuration\x22).pipe((0,t.U)(b=\x3eb.config,(0,I.K)(b=\x3e{throw b})))),this.configObservable}}return T.\x5cu0275fac=function(b){return new(b||T)(U.LFG(M.eN))},T.\x5cu0275prov=U.Yz7({token:T,factory:T.\x5cu0275fac,providedIn:\x22root\x22}),T})()},5376:(tt,K,c)=\x3e{c.d(K,{t:()=\x3es});var S=c(4850),t=c(7221),I=c(2340),U=c(4650),M=c(529);let s=(()=\x3e{class T{constructor(b){this.http=b,this.hostServer=I.N.hostServer,this.host=this.hostServer+\x22/rest/web3\x22}nftUnlocked(){return this.http.get(this.host+\x22/nftUnlocked\x22).pipe((0,S.U)(b=\x3eb),(0,t.K)(b=\x3e{throw b}))}nftMintListen(){return this.http.get(this.host+\x22/nftMintListen\x22).pipe((0,S.U)(b=\x3eb),(0,t.K)(b=\x3e{throw b}))}checkNftMinted(){return this.http.get(this.hostServer+\x22/api/Challenges/?key=nftMintChallenge\x22).pipe((0,S.U)(b=\x3eb),(0,t.K)(b=\x3e{throw b}))}submitKey(b){return this.http.post(this.host+\x22/submitKey\x22,{privateKey:b}).pipe((0,S.U)(u=\x3eu),(0,t.K)(u=\x3e{throw u}))}verifyNFTWallet(b){return this.http.post(this.host+\x22/walletNFTVerify\x22,{walletAddress:b}).pipe((0,S.U)(u=\x3eu),(0,t.K)(u=\x3e{throw u}))}walletAddressSend(b){return this.http.post(this.host+\x22/walletExploitAddress\x22,{walletAddress:b}).pipe((0,S.U)(u=\x3eu),(0,t.K)(u=\x3e{throw u}))}}return T.\x5cu0275fac=function(b){return new(b||T)(U.LFG(M.eN))},T.\x5cu0275prov=U.Yz7({token:T,factory:T.\x5cu0275fac,providedIn:\x22root\x22}),T})()},5004:(tt,K,c)=\x3e{c.d(K,{H:()=\x3eU});var S=c(4650),t=c(1195),I=c(7009);let U=(()=\x3e{class M{constructor(T,k){this.translateService=T,this.snackBar=k}open(T,k){this.translateService.get(T).subscribe(b=\x3e{this.snackBar.open(b,\x22X\x22,{duration:5e3,panelClass:k})},()=\x3e{this.snackBar.open(T,\x22X\x22,{duration:5e3,panelClass:k})})}}return M.\x5cu0275fac=function(T){return new(T||M)(S.LFG(t.sK),S.LFG(I.ux))},M.\x5cu0275prov=S.Yz7({token:M,factory:M.\x5cu0275fac,providedIn:\x22root\x22}),M})()},2340:(tt,K,c)=\x3e{c.d(K,{N:()=\x3eS});const S={production:!0,hostServer:\x22.\x22}},6836:(tt,K,c)=\x3e{c.r(K),c.d(K,{hasInstructions:()=\x3ejt,startHackingInstructorFor:()=\x3eWt});var S=c(5861),t=c(8111),I=c(491),U=c.n(I);let M;const s={faster:.5,fast:.75,normal:1,slow:1.25,slower:1.5};function T(A){return k.apply(this,arguments)}function k(){return(k=(0,S.Z)(function*(A){yield new Promise(y=\x3e{setTimeout(y,A)})})).apply(this,arguments)}function b(A,y,P={ignoreCase:!0,replacement:[]}){return(0,S.Z)(function*(){const L=document.querySelector(A);if(2===P.replacement?.length){M||(M=(yield(yield fetch(\x22/rest/admin/application-configuration\x22)).json()).config);const G=P.replacement[1].split(\x22.\x22);let nt=M;for(const H of G)nt=nt[H];y=y.replace(P.replacement[0],nt)}for(;(!P.ignoreCase||L.value.toLowerCase()!==y.toLowerCase())&&(P.ignoreCase||L.value!==y);)yield T(100)})}function Y(A,y,P={ignoreCase:!0}){return(0,S.Z)(function*(){const L=document.querySelector(A);for(;;){if(\x22\x22!==L.value){if(P.ignoreCase&&L.value.toLowerCase()!==y.toLowerCase())break;if(!P.ignoreCase&&L.value!==y)break}yield T(100)}})}function u(A){return(0,S.Z)(function*(){const y=document.querySelector(A);for(;!y.value||\x22\x22===y.value;)yield T(100)})}function h(A){return(0,S.Z)(function*(){const y=document.querySelector(A);y||console.warn(`Could not find Element with selector \x22${A}\x22`),yield new Promise(P=\x3e{y.addEventListener(\x22click\x22,()=\x3e{P()})})})}function Z(A,y){return(0,S.Z)(function*(){for(;;){const P=document.querySelector(A);if(P&&P.innerHTML===y)break;yield T(100)}})}function p(A){return(0,S.Z)(function*(){M||(M=(yield(yield fetch(\x22/rest/admin/application-configuration\x22)).json()).config);let y=s[M.hackingInstructor.hintPlaybackSpeed];y??(y=1),yield T(A*y)})}function F(A){return(0,S.Z)(function*(){for(;!window.location.hash.startsWith(`#/${A}`);)yield T(100)})}function mt(){return(0,S.Z)(function*(){for(;null===localStorage.getItem(\x22token\x22);)yield T(100)})}function v(){return(0,S.Z)(function*(){for(;null!==localStorage.getItem(\x22token\x22);)yield T(100)})}function _(){const A=window.innerHeight,y=window.innerWidth;return(0,S.Z)(function*(){for(;window.innerHeight===A&&window.innerWidth===y;)yield T(100)})}const Yt={name:\x22Login Admin\x22,hints:[{text:\x22To start this challenge, you\x27ll have to log out first.\x22,fixture:\x22#navbarAccount\x22,unskippable:!0,resolved:v()},{text:\x22Let\x27s try if we find a way to log in with the administrator\x27s user account. To begin, go to the _Login_ page via the _Account_ menu.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:F(\x22login\x22)},{text:\x22To find a way around the normal login process we will try to use a **SQL Injection** (SQLi) attack.\x22,fixture:\x22#email\x22,resolved:p(8e3)},{text:\x22A good starting point for simple SQL Injections is to insert quotation marks (like `\x5c\x22` or `\x27`). These mess with the syntax of an insecurely concatenated query and might give you feedback if an endpoint is vulnerable or not.\x22,fixture:\x22#email\x22,resolved:p(15e3)},{text:\x22Start with entering `\x27` in the **email field**.\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22\x27\x22)},{text:\x22Now put anything in the **password field**. It doesn\x27t matter what.\x22,fixture:\x22#password\x22,unskippable:!0,resolved:u(\x22#password\x22)},{text:\x22Press the _Log in_ button.\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22Nice! Do you see the red `[object Object]` error at the top? Unfortunately it isn\x27t really telling us much about what went wrong...\x22,fixture:\x22#rememberMe\x22,resolved:p(1e4)},{text:\x22Maybe you will be able to find out more information about the error in the JavaScript console or the network tab of your browser!\x22,fixture:\x22#rememberMe\x22,resolved:p(1e4)},{text:\x22Did you spot the error message with the `SQLITE_ERROR` and the entire SQL query in the 500 response to `/login`? If not, keep the network tab open and click _Log in_ again. Then inspect the occuring response closely.\x22,fixture:\x22#rememberMe\x22,resolved:p(3e4)},{text:\x22Let\x27s try to manipulate the query a bit to make it useful. Try out typing `\x27 OR true` into the **email field**.\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22\x27 OR true\x22)},{text:\x22Now click the _Log in_ button again.\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22Mhh... The query is still invalid? Can you see why from the new error in the HTTP response?\x22,fixture:\x22#rememberMe\x22,resolved:p(8e3)},{text:\x22We need to make sure that the rest of the query after our injection doesn\x27t get executed. Any Ideas?\x22,fixture:\x22#rememberMe\x22,resolved:p(8e3)},{text:\x22You can comment out anything after your injection payload from query using comments in SQL. In SQLite databases you can use `--` for that.\x22,fixture:\x22#rememberMe\x22,resolved:p(1e4)},{text:\x22So, type in `\x27 OR true--` into the email field.\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22\x27 OR true--\x22)},{text:\x22Press the _Log in_ button again and sit back...\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22That worked, right?! To see with whose account you just logged in, open the _Account_ menu.\x22,fixture:\x22#navbarAccount\x22,unskippable:!0,resolved:h(\x22#navbarAccount\x22)},{text:\x22\x5cu{1f389} Congratulations! You have been logged in as the **administrator** of the shop! (If you want to understand why, try to reproduce what your `\x27 OR true--` did _exactly_ to the query.)\x22,fixture:\x22app-navbar\x22,resolved:p(2e4)}]},X={name:\x22DOM XSS\x22,hints:[{text:\x22For this challenge, we\x27ll take a close look at the _Search_ field at the top of the screen.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:p(8e3)},{text:\x22Let\x27s start by searching for all products containing `owasp` in their name or description.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:b(\x22#searchQuery input\x22,\x22owasp\x22)},{text:\x22Now hit enter.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:Z(\x22#searchValue\x22,\x22owasp\x22)},{text:\x22Nice! You should now see many cool OWASP-related products.\x22,fixture:\x22.fill-remaining-space\x22,resolved:p(8e3)},{text:\x22You might have noticed, that your search term is displayed above the results?\x22,fixture:\x22app-search-result\x22,resolved:p(8e3)},{text:\x22What we will try now is a **Cross-Site Scripting (XSS)** attack, where we try to inject HTML or JavaScript code into the application.\x22,fixture:\x22app-search-result\x22,resolved:p(15e3)},{text:\x22Change your search value into `\x3ch1\x3eowasp` to see if we can inject HTML.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:b(\x22#searchQuery input\x22,\x22\x3ch1\x3eowasp\x22)},{text:\x22Hit enter again.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:Z(\x22#searchValue\x22,\x22\x3ch1\x3eowasp\x3c/h1\x3e\x22)},{text:\x22Hmm, this doesn\x27t look normal, does it?\x22,fixture:\x22.noResult\x22,resolved:p(8e3)},{text:\x22If you right-click on the search term and inspect that part of the page with your browser, you will see that our `h1`-tag was _actually_ embedded into the page and is not just shown as plain text!\x22,fixture:\x22.noResult\x22,resolved:p(16e3)},{text:\x22Let\x27s now try to inject JavaScript. Type `\x3cscript\x3ealert(xss)\x3c\x5c/script\x3e` into the search box now.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:b(\x22#searchQuery input\x22,\x22\x3cscript\x3ealert(xss)\x3c\x5c/script\x3e\x22)},{text:\x22Hit enter again.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:Z(\x22#searchValue\x22,\x22\x3cscript\x3ealert(xss)\x3c\x5c/script\x3e\x22)},{text:\x22\x5cu{1f614} This didn\x27t work as we hoped. If you inspect the page, you should see the `script`-tag but it is not executed for some reason.\x22,fixture:\x22.noResult\x22,resolved:p(1e4)},{text:\x27Luckily there are _many_ different XSS payloads we can try. Let\x5c\x27s try this one next: \x3ccode\x3e&lt;iframe src=\x22javascript:alert(&#96;xss&#96;)\x22&gt;\x3c/code\x3e.\x27,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:b(\x22#searchQuery input\x22,\x27\x3ciframe src=\x22javascript:alert(`xss`)\x22\x3e\x27)},{text:\x22Hit enter one more time. If an alert box appears, you must confirm it in order to close it.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:Z(\x22#searchValue\x22,\x27\x3ciframe src=\x22javascript:alert(`xss`)\x22\x3e\x3c/iframe\x3e\x27)},{text:\x22\x5cu{1f389} Congratulations! You just successfully performed an XSS attack!\x22,fixture:\x22.noResult\x22,resolved:p(8e3)},{text:\x22More precisely, this was a **DOM XSS** attack, because your payload was handled and improperly embedded into the page by the application frontend code without even sending it to the server.\x22,fixture:\x22.noResult\x22,resolved:p(16e3)}]},kt={name:\x22Score Board\x22,hints:[{text:\x22This application is riddled with security vulnerabilities. Your progress exploiting these is tracked on a _Score Board_.\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:p(1e4)},{text:\x22You won\x27t find a link to it in the navigation or side bar, though. Finding the _Score Board_ is in itself actually one of the hacking challenges.\x22,fixture:\x22app-navbar\x22,resolved:p(12e3)},{text:\x22You could just start guessing the URL of the _Score Board_ or comb through the client-side JavaScript code for useful information.\x22,fixture:\x22app-navbar\x22,resolved:p(12e3)},{text:\x22You find the JavaScript code in the DevTools of your browser that will open with `F12`.\x22,fixture:\x22app-navbar\x22,resolved:_()},{text:\x22Look through the client-side JavaScript in the _Sources_ tab for clues. Or just start URL guessing. It\x27s up to you!\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:F(\x22score-board\x22)},{text:\x22\x5cu{1f389} Congratulations! You found the _Score Board_! Good luck and happy hacking!\x22,fixture:\x22app-score-board\x22,resolved:p(6e4)}]},lt={name:\x22Privacy Policy\x22,hints:[{text:\x22Log in with any user to begin this challenge. You can use an existing or freshly registered account.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:mt()},{text:\x22Great, you are logged in! Now open the _Account_ menu.\x22,fixture:\x22#navbarAccount\x22,resolved:h(\x22#navbarAccount\x22)},{text:\x22Open the _Privacy & Security_ sub-menu and click _Privacy Policy_.\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:F(\x22privacy-security/privacy-policy\x22)},{text:\x22\x5cu{1f389} That was super easy, right? This challenge is a bit of a joke actually, because nobody reads any fine print online... \x5cu{1f648}\x22,fixture:\x22app-navbar\x22,resolved:p(6e4)}]},z={name:\x22Login Jim\x22,hints:[{text:\x22To start this challenge, you\x27ll have to log out first.\x22,fixture:\x22#navbarAccount\x22,unskippable:!0,resolved:v()},{text:\x22Let\x27s try if we find a way to log in with Jim\x27s user account. To begin, go to the _Login_ page via the _Account_ menu.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:F(\x22login\x22)},{text:\x22As you would expect you need to supply Jim\x27s email address and password to log in regularly. But you might have neither at the moment.\x22,fixture:\x22app-navbar\x22,resolved:p(15e3)},{text:\x22If we had at least the email address, we could then try a **SQL Injection** (SQLi) attack to avoid having to supply a password.\x22,fixture:\x22app-navbar\x22,resolved:p(15e3)},{text:\x22So, let\x27s go find out Jim\x27s email! Luckily the shop is very bad with privacy and leaks emails in different places, for instance in the product reviews.\x22,fixture:\x22app-navbar\x22,resolved:p(15e3)},{text:\x22Go back to the product list and click on some to open their details dialog which also hold the user reviews.\x22,fixture:\x22.fill-remaining-space\x22,resolved:F(\x22search\x22)},{text:\x22Once you found a user review by Jim and learned his email, go to the _Login_ screen.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:F(\x22login\x22)},{text:\x22Supply Jim\x27s email address in the **email field**.\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22jim@juice-sh.op\x22,{replacement:[\x22juice-sh.op\x22,\x22application.domain\x22]})},{text:\x22Now put anything in the **password field**. Let\x27s assume we don\x27t know it yet, even if you happen to already do.\x22,fixture:\x22#password\x22,unskippable:!0,resolved:Y(\x22#password\x22,\x22ncc-1701\x22)},{text:\x22Press the _Log in_ button.\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22This didn\x27t work, but did you honestly expect it to? We need to craft an SQLi attack first!\x22,fixture:\x22#rememberMe\x22,resolved:p(1e4)},{text:\x22You can comment out the entire password check clause of the DB query by adding `\x27--` to Jim\x27s email address!\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22jim@juice-sh.op\x27--\x22,{replacement:[\x22juice-sh.op\x22,\x22application.domain\x22]})},{text:\x22Now click the _Log in_ button again.\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22\x5cu{1f389} Congratulations! You have been logged in as Jim!\x22,fixture:\x22app-navbar\x22,resolved:p(5e3)}]},It={name:\x22View Basket\x22,hints:[{text:\x22This challenge is about **Horizontal Privilege Escalation**, meaning you are supposed to access data that does not belong to your own account but to another user\x27s.\x22,fixture:\x22app-navbar\x22,resolved:p(18e3)},{text:\x22To start this challenge, you\x27ll have to log in first.\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:mt()},{text:\x22First, go to the _Your Basket_ page to view your own shopping basket. It\x27s likely to be empty, if you didn\x27t add anything yet.\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:F(\x22basket\x22)},{text:\x22To pass this challenge, you will need to peek into another user\x27s basket while remaining logged in with your own account.\x22,fixture:\x22app-navbar\x22,resolved:p(8e3)},{text:\x22If the application stores a reference to the basket somewhere in the browser, that might be a possible attack vector.\x22,fixture:\x22app-navbar\x22,resolved:p(12e3)},{text:\x22Open the browser\x27s _Development Tools_ and locate the _Session Storage_ tab. Similar to \x5cu{1f36a}s, it can be used to store data in key/value pairs for each website.\x22,fixture:\x22app-navbar\x22,resolved:_()},{text:\x22Look over the names of the used session keys. Do you see something that might be related to the shopping basket? Try setting it to a different value! \x5cu270d\x5cufe0f\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:()=\x3e(0,S.Z)(function*(){const A=sessionStorage.getItem(\x22bid\x22);for(;sessionStorage.getItem(\x22bid\x22)===A;)yield T(100)})()},{text:\x22Great, you have changed the `bid` value which might be some ID for the shopping basket!\x22,fixture:\x22app-navbar\x22,resolved:p(8e3)},{text:\x22Now, go to any other screen and then back to _Your Basket_. If nothing happens you might have set an invalid or non-existing `bid`. Try another in that case.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:()=\x3e(0,S.Z)(function*(){const A=sessionStorage.getItem(\x22itemTotal\x22);for(;sessionStorage.getItem(\x22itemTotal\x22)===A;)yield T(100)})()},{text:\x22\x5cu{1f389} Congratulations! You are now viewing another user\x27s shopping basket!\x22,fixture:\x22app-basket\x22,resolved:p(15e3)}]},Ut={name:\x22Forged Feedback\x22,hints:[{text:\x22To start this challenge, first go to the _Customer Feedback_ page.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:F(\x22contact\x22)},{text:\x22This challenge is about broken access controls. To pass it, you need to impersonate another user while providing feedback.\x22,fixture:\x22app-navbar\x22,resolved:p(1e4)},{text:\x22If you would now submit feedback, it would be posted by yourself while logged in or anonymously while logged out.\x22,fixture:\x22app-navbar\x22,resolved:p(1e4)},{text:\x22We will now search for any mistake the application developers might have made in setting the author of any new feedback.\x22,fixture:\x22app-navbar\x22,resolved:p(1e4)},{text:\x22Open the browser\x27s _Development Tools_ and try finding anything interesting while inspecting the feedback form.\x22,fixture:\x22app-navbar\x22,resolved:_()},{text:\x22There is more than meets the eye among the fields of the form... \x5cu{1f609}\x22,fixture:\x22app-navbar\x22,resolved:p(8e3)},{text:\x22Once you found the field that shouldn\x27t even be there, try manipulating its value to one that might represent another user!\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:()=\x3e(0,S.Z)(function*(){const A=document.getElementById(\x22userId\x22).value;for(;document.getElementById(\x22userId\x22).value===A;)yield T(100)})()},{text:\x22You found and changed the invisible `userId`! Now submit the form to complete the challenge.\x22,fixture:\x22app-navbar\x22,unskippable:!0,resolved:h(\x22#submitButton\x22)},{text:\x22\x5cu{1f389} Congratulations, you successfully submitted a feedback as another user!\x22,fixture:\x22app-navbar\x22,resolved:p(15e3)}]},gt={name:\x22Password Strength\x22,hints:[{text:\x22To start this challenge, you\x27ll have to log out first.\x22,fixture:\x22#navbarAccount\x22,unskippable:!0,resolved:v()},{text:\x22In this challenge we\x27ll try to log into the administrator\x27s user account using his original credentials.\x22,fixture:\x22app-navbar\x22,resolved:p(7e3)},{text:\x22If you don\x27t know it already, you must first find out the admin\x27s email address. The user feedback and product reviews are good places to look into. When you have it, go to the _Login_ page.\x22,fixture:\x22app-navbar\x22,fixtureAfter:!0,unskippable:!0,resolved:F(\x22login\x22)},{text:\x22Enter the admin\x27s email address into the **email field**.\x22,fixture:\x22#email\x22,unskippable:!0,resolved:b(\x22#email\x22,\x22admin@juice-sh.op\x22)},{text:\x22Now for the password. Lucky for us, the admin chose a really, really, **really** stupid one. Just try any that comes to your mind!\x22,fixture:\x22#password\x22,unskippable:!0,resolved:u(\x22#password\x22)},{text:\x22\x5cu{1f926}\x5cu200d\x5cu2642\x5cufe0f Nah, that was wrong! Keep trying! I\x27ll tell you when you\x27re one the right track.\x22,fixture:\x22#password\x22,unskippable:!0,resolved:b(\x22#password\x22,\x22admin\x22)},{text:\x22Okay, you are one the right track, but this would have been the worst password in the world for an admin. He spiced it up a little bit with some extra non-letter characters. Keep trying!\x22,fixture:\x22#password\x22,unskippable:!0,resolved:b(\x22#password\x22,\x22admin1\x22)},{text:\x22\x5cu{1f525} Yes, it\x27s getting warmer! Try adding some more numbers maybe?\x22,fixture:\x22#password\x22,unskippable:!0,resolved:b(\x22#password\x22,\x22admin12\x22)},{text:\x22\x5cu{1f9ef} It\x27s getting hot! Just one more digit...\x22,fixture:\x22#password\x22,unskippable:!0,resolved:b(\x22#password\x22,\x22admin123\x22)},{text:\x22Okay, now press the _Log in_ button.\x22,fixture:\x22#rememberMe\x22,unskippable:!0,resolved:h(\x22#loginButton\x22)},{text:\x22\x5cu{1f389} Congratulations! You have been logged in as the **administrator** of the shop thanks to his very ill chosen password!\x22,fixture:\x22app-navbar\x22,resolved:p(2e4)}]},Q={name:\x22Bonus Payload\x22,hints:[{text:\x22Assuming you did the **DOM XSS** tutorial already, this one just uses a funnier payload on the _Search_ field.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:p(1e4)},{text:\x22Enter or paste this payload into the _Search_ field: \x3ccode\x3e&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076&amp;color=%23ff5500&amp;auto&lowbar;play=true&amp;hide&lowbar;related=false&amp;show&lowbar;comments=true&amp;show&lowbar;user=true&amp;show&lowbar;reposts=false&amp;show&lowbar;teaser=true&quot;&gt;&lt;/iframe&gt;\x3c/code\x3e.\x22,fixture:\x22.fill-remaining-space\x22,unskippable:!0,resolved:b(\x22#searchQuery input\x22,\x27\x3ciframe width=\x22100%\x22 height=\x22166\x22 scrolling=\x22no\x22 frameborder=\x22no\x22 allow=\x22autoplay\x22 src=\x22https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true\x22'}